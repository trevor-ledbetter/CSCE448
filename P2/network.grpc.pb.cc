// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: network.proto

#include "network.pb.h"
#include "network.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace network {

static const char* SNS_method_names[] = {
  "/network.SNS/Follow",
};

std::unique_ptr< SNS::Stub> SNS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SNS::Stub> stub(new SNS::Stub(channel));
  return stub;
}

SNS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Follow_(SNS_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SNS::Stub::Follow(::grpc::ClientContext* context, const ::network::FollowRequest& request, ::network::FollowReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Follow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::network::FollowReply>* SNS::Stub::AsyncFollowRaw(::grpc::ClientContext* context, const ::network::FollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::network::FollowReply>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::network::FollowReply>* SNS::Stub::PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::network::FollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::network::FollowReply>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, false);
}

SNS::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SNS_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SNS::Service, ::network::FollowRequest, ::network::FollowReply>(
          std::mem_fn(&SNS::Service::Follow), this)));
}

SNS::Service::~Service() {
}

::grpc::Status SNS::Service::Follow(::grpc::ServerContext* context, const ::network::FollowRequest* request, ::network::FollowReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace network

