// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#ifndef PROTOBUF_network_2eproto__INCLUDED
#define PROTOBUF_network_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_network_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsClientConnectImpl();
void InitDefaultsClientConnect();
void InitDefaultsServerAllowImpl();
void InitDefaultsServerAllow();
void InitDefaultsFollowRequestImpl();
void InitDefaultsFollowRequest();
void InitDefaultsFollowReplyImpl();
void InitDefaultsFollowReply();
void InitDefaultsUnfollowRequestImpl();
void InitDefaultsUnfollowRequest();
void InitDefaultsUnfollowReplyImpl();
void InitDefaultsUnfollowReply();
void InitDefaultsListRequestImpl();
void InitDefaultsListRequest();
void InitDefaultsListReplyImpl();
void InitDefaultsListReply();
void InitDefaultsPostImpl();
void InitDefaultsPost();
void InitDefaultsTimelineImpl();
void InitDefaultsTimeline();
void InitDefaultsUserDataImpl();
void InitDefaultsUserData();
void InitDefaultsUserDataBase_AllUsersEntry_DoNotUseImpl();
void InitDefaultsUserDataBase_AllUsersEntry_DoNotUse();
void InitDefaultsUserDataBaseImpl();
void InitDefaultsUserDataBase();
void InitDefaultsDebugRequestImpl();
void InitDefaultsDebugRequest();
void InitDefaultsDebugReplyImpl();
void InitDefaultsDebugReply();
inline void InitDefaults() {
  InitDefaultsClientConnect();
  InitDefaultsServerAllow();
  InitDefaultsFollowRequest();
  InitDefaultsFollowReply();
  InitDefaultsUnfollowRequest();
  InitDefaultsUnfollowReply();
  InitDefaultsListRequest();
  InitDefaultsListReply();
  InitDefaultsPost();
  InitDefaultsTimeline();
  InitDefaultsUserData();
  InitDefaultsUserDataBase_AllUsersEntry_DoNotUse();
  InitDefaultsUserDataBase();
  InitDefaultsDebugRequest();
  InitDefaultsDebugReply();
}
}  // namespace protobuf_network_2eproto
namespace network {
class ClientConnect;
class ClientConnectDefaultTypeInternal;
extern ClientConnectDefaultTypeInternal _ClientConnect_default_instance_;
class DebugReply;
class DebugReplyDefaultTypeInternal;
extern DebugReplyDefaultTypeInternal _DebugReply_default_instance_;
class DebugRequest;
class DebugRequestDefaultTypeInternal;
extern DebugRequestDefaultTypeInternal _DebugRequest_default_instance_;
class FollowReply;
class FollowReplyDefaultTypeInternal;
extern FollowReplyDefaultTypeInternal _FollowReply_default_instance_;
class FollowRequest;
class FollowRequestDefaultTypeInternal;
extern FollowRequestDefaultTypeInternal _FollowRequest_default_instance_;
class ListReply;
class ListReplyDefaultTypeInternal;
extern ListReplyDefaultTypeInternal _ListReply_default_instance_;
class ListRequest;
class ListRequestDefaultTypeInternal;
extern ListRequestDefaultTypeInternal _ListRequest_default_instance_;
class Post;
class PostDefaultTypeInternal;
extern PostDefaultTypeInternal _Post_default_instance_;
class ServerAllow;
class ServerAllowDefaultTypeInternal;
extern ServerAllowDefaultTypeInternal _ServerAllow_default_instance_;
class Timeline;
class TimelineDefaultTypeInternal;
extern TimelineDefaultTypeInternal _Timeline_default_instance_;
class UnfollowReply;
class UnfollowReplyDefaultTypeInternal;
extern UnfollowReplyDefaultTypeInternal _UnfollowReply_default_instance_;
class UnfollowRequest;
class UnfollowRequestDefaultTypeInternal;
extern UnfollowRequestDefaultTypeInternal _UnfollowRequest_default_instance_;
class UserData;
class UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
class UserDataBase;
class UserDataBaseDefaultTypeInternal;
extern UserDataBaseDefaultTypeInternal _UserDataBase_default_instance_;
class UserDataBase_AllUsersEntry_DoNotUse;
class UserDataBase_AllUsersEntry_DoNotUseDefaultTypeInternal;
extern UserDataBase_AllUsersEntry_DoNotUseDefaultTypeInternal _UserDataBase_AllUsersEntry_DoNotUse_default_instance_;
}  // namespace network
namespace network {

// ===================================================================

class ClientConnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.ClientConnect) */ {
 public:
  ClientConnect();
  virtual ~ClientConnect();

  ClientConnect(const ClientConnect& from);

  inline ClientConnect& operator=(const ClientConnect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientConnect(ClientConnect&& from) noexcept
    : ClientConnect() {
    *this = ::std::move(from);
  }

  inline ClientConnect& operator=(ClientConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientConnect* internal_default_instance() {
    return reinterpret_cast<const ClientConnect*>(
               &_ClientConnect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ClientConnect* other);
  friend void swap(ClientConnect& a, ClientConnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientConnect* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientConnect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientConnect& from);
  void MergeFrom(const ClientConnect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientConnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string connectingClient = 1;
  void clear_connectingclient();
  static const int kConnectingClientFieldNumber = 1;
  const ::std::string& connectingclient() const;
  void set_connectingclient(const ::std::string& value);
  #if LANG_CXX11
  void set_connectingclient(::std::string&& value);
  #endif
  void set_connectingclient(const char* value);
  void set_connectingclient(const char* value, size_t size);
  ::std::string* mutable_connectingclient();
  ::std::string* release_connectingclient();
  void set_allocated_connectingclient(::std::string* connectingclient);

  // @@protoc_insertion_point(class_scope:network.ClientConnect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr connectingclient_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsClientConnectImpl();
};
// -------------------------------------------------------------------

class ServerAllow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.ServerAllow) */ {
 public:
  ServerAllow();
  virtual ~ServerAllow();

  ServerAllow(const ServerAllow& from);

  inline ServerAllow& operator=(const ServerAllow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerAllow(ServerAllow&& from) noexcept
    : ServerAllow() {
    *this = ::std::move(from);
  }

  inline ServerAllow& operator=(ServerAllow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerAllow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerAllow* internal_default_instance() {
    return reinterpret_cast<const ServerAllow*>(
               &_ServerAllow_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ServerAllow* other);
  friend void swap(ServerAllow& a, ServerAllow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerAllow* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerAllow* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerAllow& from);
  void MergeFrom(const ServerAllow& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerAllow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 IReplyValue = 1;
  void clear_ireplyvalue();
  static const int kIReplyValueFieldNumber = 1;
  ::google::protobuf::int32 ireplyvalue() const;
  void set_ireplyvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:network.ServerAllow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 ireplyvalue_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsServerAllowImpl();
};
// -------------------------------------------------------------------

class FollowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.FollowRequest) */ {
 public:
  FollowRequest();
  virtual ~FollowRequest();

  FollowRequest(const FollowRequest& from);

  inline FollowRequest& operator=(const FollowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FollowRequest(FollowRequest&& from) noexcept
    : FollowRequest() {
    *this = ::std::move(from);
  }

  inline FollowRequest& operator=(FollowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FollowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FollowRequest* internal_default_instance() {
    return reinterpret_cast<const FollowRequest*>(
               &_FollowRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FollowRequest* other);
  friend void swap(FollowRequest& a, FollowRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FollowRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FollowRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FollowRequest& from);
  void MergeFrom(const FollowRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FollowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string requestingClient = 1;
  void clear_requestingclient();
  static const int kRequestingClientFieldNumber = 1;
  const ::std::string& requestingclient() const;
  void set_requestingclient(const ::std::string& value);
  #if LANG_CXX11
  void set_requestingclient(::std::string&& value);
  #endif
  void set_requestingclient(const char* value);
  void set_requestingclient(const char* value, size_t size);
  ::std::string* mutable_requestingclient();
  ::std::string* release_requestingclient();
  void set_allocated_requestingclient(::std::string* requestingclient);

  // string followRequest = 2;
  void clear_followrequest();
  static const int kFollowRequestFieldNumber = 2;
  const ::std::string& followrequest() const;
  void set_followrequest(const ::std::string& value);
  #if LANG_CXX11
  void set_followrequest(::std::string&& value);
  #endif
  void set_followrequest(const char* value);
  void set_followrequest(const char* value, size_t size);
  ::std::string* mutable_followrequest();
  ::std::string* release_followrequest();
  void set_allocated_followrequest(::std::string* followrequest);

  // @@protoc_insertion_point(class_scope:network.FollowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr requestingclient_;
  ::google::protobuf::internal::ArenaStringPtr followrequest_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsFollowRequestImpl();
};
// -------------------------------------------------------------------

class FollowReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.FollowReply) */ {
 public:
  FollowReply();
  virtual ~FollowReply();

  FollowReply(const FollowReply& from);

  inline FollowReply& operator=(const FollowReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FollowReply(FollowReply&& from) noexcept
    : FollowReply() {
    *this = ::std::move(from);
  }

  inline FollowReply& operator=(FollowReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FollowReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FollowReply* internal_default_instance() {
    return reinterpret_cast<const FollowReply*>(
               &_FollowReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FollowReply* other);
  friend void swap(FollowReply& a, FollowReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FollowReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FollowReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FollowReply& from);
  void MergeFrom(const FollowReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FollowReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 IReplyValue = 1;
  void clear_ireplyvalue();
  static const int kIReplyValueFieldNumber = 1;
  ::google::protobuf::int32 ireplyvalue() const;
  void set_ireplyvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:network.FollowReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 ireplyvalue_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsFollowReplyImpl();
};
// -------------------------------------------------------------------

class UnfollowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.UnfollowRequest) */ {
 public:
  UnfollowRequest();
  virtual ~UnfollowRequest();

  UnfollowRequest(const UnfollowRequest& from);

  inline UnfollowRequest& operator=(const UnfollowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnfollowRequest(UnfollowRequest&& from) noexcept
    : UnfollowRequest() {
    *this = ::std::move(from);
  }

  inline UnfollowRequest& operator=(UnfollowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnfollowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnfollowRequest* internal_default_instance() {
    return reinterpret_cast<const UnfollowRequest*>(
               &_UnfollowRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UnfollowRequest* other);
  friend void swap(UnfollowRequest& a, UnfollowRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnfollowRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UnfollowRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnfollowRequest& from);
  void MergeFrom(const UnfollowRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnfollowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string requestingClient = 1;
  void clear_requestingclient();
  static const int kRequestingClientFieldNumber = 1;
  const ::std::string& requestingclient() const;
  void set_requestingclient(const ::std::string& value);
  #if LANG_CXX11
  void set_requestingclient(::std::string&& value);
  #endif
  void set_requestingclient(const char* value);
  void set_requestingclient(const char* value, size_t size);
  ::std::string* mutable_requestingclient();
  ::std::string* release_requestingclient();
  void set_allocated_requestingclient(::std::string* requestingclient);

  // string unfollowRequest = 2;
  void clear_unfollowrequest();
  static const int kUnfollowRequestFieldNumber = 2;
  const ::std::string& unfollowrequest() const;
  void set_unfollowrequest(const ::std::string& value);
  #if LANG_CXX11
  void set_unfollowrequest(::std::string&& value);
  #endif
  void set_unfollowrequest(const char* value);
  void set_unfollowrequest(const char* value, size_t size);
  ::std::string* mutable_unfollowrequest();
  ::std::string* release_unfollowrequest();
  void set_allocated_unfollowrequest(::std::string* unfollowrequest);

  // @@protoc_insertion_point(class_scope:network.UnfollowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr requestingclient_;
  ::google::protobuf::internal::ArenaStringPtr unfollowrequest_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsUnfollowRequestImpl();
};
// -------------------------------------------------------------------

class UnfollowReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.UnfollowReply) */ {
 public:
  UnfollowReply();
  virtual ~UnfollowReply();

  UnfollowReply(const UnfollowReply& from);

  inline UnfollowReply& operator=(const UnfollowReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnfollowReply(UnfollowReply&& from) noexcept
    : UnfollowReply() {
    *this = ::std::move(from);
  }

  inline UnfollowReply& operator=(UnfollowReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnfollowReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnfollowReply* internal_default_instance() {
    return reinterpret_cast<const UnfollowReply*>(
               &_UnfollowReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(UnfollowReply* other);
  friend void swap(UnfollowReply& a, UnfollowReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnfollowReply* New() const PROTOBUF_FINAL { return New(NULL); }

  UnfollowReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnfollowReply& from);
  void MergeFrom(const UnfollowReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnfollowReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 IReplyValue = 1;
  void clear_ireplyvalue();
  static const int kIReplyValueFieldNumber = 1;
  ::google::protobuf::int32 ireplyvalue() const;
  void set_ireplyvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:network.UnfollowReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 ireplyvalue_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsUnfollowReplyImpl();
};
// -------------------------------------------------------------------

class ListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.ListRequest) */ {
 public:
  ListRequest();
  virtual ~ListRequest();

  ListRequest(const ListRequest& from);

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListRequest(ListRequest&& from) noexcept
    : ListRequest() {
    *this = ::std::move(from);
  }

  inline ListRequest& operator=(ListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRequest* internal_default_instance() {
    return reinterpret_cast<const ListRequest*>(
               &_ListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ListRequest* other);
  friend void swap(ListRequest& a, ListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRequest& from);
  void MergeFrom(const ListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:network.ListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsListRequestImpl();
};
// -------------------------------------------------------------------

class ListReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.ListReply) */ {
 public:
  ListReply();
  virtual ~ListReply();

  ListReply(const ListReply& from);

  inline ListReply& operator=(const ListReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListReply(ListReply&& from) noexcept
    : ListReply() {
    *this = ::std::move(from);
  }

  inline ListReply& operator=(ListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReply* internal_default_instance() {
    return reinterpret_cast<const ListReply*>(
               &_ListReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ListReply* other);
  friend void swap(ListReply& a, ListReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ListReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListReply& from);
  void MergeFrom(const ListReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 1;
  int names_size() const;
  void clear_names();
  static const int kNamesFieldNumber = 1;
  const ::std::string& names(int index) const;
  ::std::string* mutable_names(int index);
  void set_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_names(int index, ::std::string&& value);
  #endif
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  ::std::string* add_names();
  void add_names(const ::std::string& value);
  #if LANG_CXX11
  void add_names(::std::string&& value);
  #endif
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:network.ListReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsListReplyImpl();
};
// -------------------------------------------------------------------

class Post : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.Post) */ {
 public:
  Post();
  virtual ~Post();

  Post(const Post& from);

  inline Post& operator=(const Post& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Post(Post&& from) noexcept
    : Post() {
    *this = ::std::move(from);
  }

  inline Post& operator=(Post&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Post& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Post* internal_default_instance() {
    return reinterpret_cast<const Post*>(
               &_Post_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Post* other);
  friend void swap(Post& a, Post& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Post* New() const PROTOBUF_FINAL { return New(NULL); }

  Post* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Post& from);
  void MergeFrom(const Post& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Post* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);

  // @@protoc_insertion_point(class_scope:network.Post)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::Timestamp* time_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsPostImpl();
};
// -------------------------------------------------------------------

class Timeline : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.Timeline) */ {
 public:
  Timeline();
  virtual ~Timeline();

  Timeline(const Timeline& from);

  inline Timeline& operator=(const Timeline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Timeline(Timeline&& from) noexcept
    : Timeline() {
    *this = ::std::move(from);
  }

  inline Timeline& operator=(Timeline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Timeline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timeline* internal_default_instance() {
    return reinterpret_cast<const Timeline*>(
               &_Timeline_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Timeline* other);
  friend void swap(Timeline& a, Timeline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Timeline* New() const PROTOBUF_FINAL { return New(NULL); }

  Timeline* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Timeline& from);
  void MergeFrom(const Timeline& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Timeline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .network.Post posts = 1;
  int posts_size() const;
  void clear_posts();
  static const int kPostsFieldNumber = 1;
  const ::network::Post& posts(int index) const;
  ::network::Post* mutable_posts(int index);
  ::network::Post* add_posts();
  ::google::protobuf::RepeatedPtrField< ::network::Post >*
      mutable_posts();
  const ::google::protobuf::RepeatedPtrField< ::network::Post >&
      posts() const;

  // @@protoc_insertion_point(class_scope:network.Timeline)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::network::Post > posts_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsTimelineImpl();
};
// -------------------------------------------------------------------

class UserData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.UserData) */ {
 public:
  UserData();
  virtual ~UserData();

  UserData(const UserData& from);

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(UserData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(UserData* other);
  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string following = 3;
  int following_size() const;
  void clear_following();
  static const int kFollowingFieldNumber = 3;
  const ::std::string& following(int index) const;
  ::std::string* mutable_following(int index);
  void set_following(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_following(int index, ::std::string&& value);
  #endif
  void set_following(int index, const char* value);
  void set_following(int index, const char* value, size_t size);
  ::std::string* add_following();
  void add_following(const ::std::string& value);
  #if LANG_CXX11
  void add_following(::std::string&& value);
  #endif
  void add_following(const char* value);
  void add_following(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& following() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_following();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .network.Timeline user_timeline = 2;
  bool has_user_timeline() const;
  void clear_user_timeline();
  static const int kUserTimelineFieldNumber = 2;
  const ::network::Timeline& user_timeline() const;
  ::network::Timeline* release_user_timeline();
  ::network::Timeline* mutable_user_timeline();
  void set_allocated_user_timeline(::network::Timeline* user_timeline);

  // @@protoc_insertion_point(class_scope:network.UserData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> following_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::network::Timeline* user_timeline_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsUserDataImpl();
};
// -------------------------------------------------------------------

class UserDataBase_AllUsersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<UserDataBase_AllUsersEntry_DoNotUse, 
    ::std::string, ::network::UserData,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<UserDataBase_AllUsersEntry_DoNotUse, 
    ::std::string, ::network::UserData,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  UserDataBase_AllUsersEntry_DoNotUse();
  UserDataBase_AllUsersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const UserDataBase_AllUsersEntry_DoNotUse& other);
  static const UserDataBase_AllUsersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UserDataBase_AllUsersEntry_DoNotUse*>(&_UserDataBase_AllUsersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class UserDataBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.UserDataBase) */ {
 public:
  UserDataBase();
  virtual ~UserDataBase();

  UserDataBase(const UserDataBase& from);

  inline UserDataBase& operator=(const UserDataBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserDataBase(UserDataBase&& from) noexcept
    : UserDataBase() {
    *this = ::std::move(from);
  }

  inline UserDataBase& operator=(UserDataBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDataBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDataBase* internal_default_instance() {
    return reinterpret_cast<const UserDataBase*>(
               &_UserDataBase_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(UserDataBase* other);
  friend void swap(UserDataBase& a, UserDataBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserDataBase* New() const PROTOBUF_FINAL { return New(NULL); }

  UserDataBase* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserDataBase& from);
  void MergeFrom(const UserDataBase& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserDataBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .network.UserData> all_users = 1;
  int all_users_size() const;
  void clear_all_users();
  static const int kAllUsersFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::network::UserData >&
      all_users() const;
  ::google::protobuf::Map< ::std::string, ::network::UserData >*
      mutable_all_users();

  // @@protoc_insertion_point(class_scope:network.UserDataBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      UserDataBase_AllUsersEntry_DoNotUse,
      ::std::string, ::network::UserData,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > all_users_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsUserDataBaseImpl();
};
// -------------------------------------------------------------------

class DebugRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.DebugRequest) */ {
 public:
  DebugRequest();
  virtual ~DebugRequest();

  DebugRequest(const DebugRequest& from);

  inline DebugRequest& operator=(const DebugRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugRequest(DebugRequest&& from) noexcept
    : DebugRequest() {
    *this = ::std::move(from);
  }

  inline DebugRequest& operator=(DebugRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugRequest* internal_default_instance() {
    return reinterpret_cast<const DebugRequest*>(
               &_DebugRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(DebugRequest* other);
  friend void swap(DebugRequest& a, DebugRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugRequest& from);
  void MergeFrom(const DebugRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp timein = 1;
  bool has_timein() const;
  void clear_timein();
  static const int kTimeinFieldNumber = 1;
  const ::google::protobuf::Timestamp& timein() const;
  ::google::protobuf::Timestamp* release_timein();
  ::google::protobuf::Timestamp* mutable_timein();
  void set_allocated_timein(::google::protobuf::Timestamp* timein);

  // @@protoc_insertion_point(class_scope:network.DebugRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* timein_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsDebugRequestImpl();
};
// -------------------------------------------------------------------

class DebugReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:network.DebugReply) */ {
 public:
  DebugReply();
  virtual ~DebugReply();

  DebugReply(const DebugReply& from);

  inline DebugReply& operator=(const DebugReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugReply(DebugReply&& from) noexcept
    : DebugReply() {
    *this = ::std::move(from);
  }

  inline DebugReply& operator=(DebugReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugReply* internal_default_instance() {
    return reinterpret_cast<const DebugReply*>(
               &_DebugReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(DebugReply* other);
  friend void swap(DebugReply& a, DebugReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugReply* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugReply& from);
  void MergeFrom(const DebugReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp timeout = 1;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 1;
  const ::google::protobuf::Timestamp& timeout() const;
  ::google::protobuf::Timestamp* release_timeout();
  ::google::protobuf::Timestamp* mutable_timeout();
  void set_allocated_timeout(::google::protobuf::Timestamp* timeout);

  // @@protoc_insertion_point(class_scope:network.DebugReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* timeout_;
  mutable int _cached_size_;
  friend struct ::protobuf_network_2eproto::TableStruct;
  friend void ::protobuf_network_2eproto::InitDefaultsDebugReplyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientConnect

// string connectingClient = 1;
inline void ClientConnect::clear_connectingclient() {
  connectingclient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientConnect::connectingclient() const {
  // @@protoc_insertion_point(field_get:network.ClientConnect.connectingClient)
  return connectingclient_.GetNoArena();
}
inline void ClientConnect::set_connectingclient(const ::std::string& value) {
  
  connectingclient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ClientConnect.connectingClient)
}
#if LANG_CXX11
inline void ClientConnect::set_connectingclient(::std::string&& value) {
  
  connectingclient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ClientConnect.connectingClient)
}
#endif
inline void ClientConnect::set_connectingclient(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connectingclient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ClientConnect.connectingClient)
}
inline void ClientConnect::set_connectingclient(const char* value, size_t size) {
  
  connectingclient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ClientConnect.connectingClient)
}
inline ::std::string* ClientConnect::mutable_connectingclient() {
  
  // @@protoc_insertion_point(field_mutable:network.ClientConnect.connectingClient)
  return connectingclient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientConnect::release_connectingclient() {
  // @@protoc_insertion_point(field_release:network.ClientConnect.connectingClient)
  
  return connectingclient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnect::set_allocated_connectingclient(::std::string* connectingclient) {
  if (connectingclient != NULL) {
    
  } else {
    
  }
  connectingclient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connectingclient);
  // @@protoc_insertion_point(field_set_allocated:network.ClientConnect.connectingClient)
}

// -------------------------------------------------------------------

// ServerAllow

// int32 IReplyValue = 1;
inline void ServerAllow::clear_ireplyvalue() {
  ireplyvalue_ = 0;
}
inline ::google::protobuf::int32 ServerAllow::ireplyvalue() const {
  // @@protoc_insertion_point(field_get:network.ServerAllow.IReplyValue)
  return ireplyvalue_;
}
inline void ServerAllow::set_ireplyvalue(::google::protobuf::int32 value) {
  
  ireplyvalue_ = value;
  // @@protoc_insertion_point(field_set:network.ServerAllow.IReplyValue)
}

// -------------------------------------------------------------------

// FollowRequest

// string requestingClient = 1;
inline void FollowRequest::clear_requestingclient() {
  requestingclient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FollowRequest::requestingclient() const {
  // @@protoc_insertion_point(field_get:network.FollowRequest.requestingClient)
  return requestingclient_.GetNoArena();
}
inline void FollowRequest::set_requestingclient(const ::std::string& value) {
  
  requestingclient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.FollowRequest.requestingClient)
}
#if LANG_CXX11
inline void FollowRequest::set_requestingclient(::std::string&& value) {
  
  requestingclient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.FollowRequest.requestingClient)
}
#endif
inline void FollowRequest::set_requestingclient(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  requestingclient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.FollowRequest.requestingClient)
}
inline void FollowRequest::set_requestingclient(const char* value, size_t size) {
  
  requestingclient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.FollowRequest.requestingClient)
}
inline ::std::string* FollowRequest::mutable_requestingclient() {
  
  // @@protoc_insertion_point(field_mutable:network.FollowRequest.requestingClient)
  return requestingclient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FollowRequest::release_requestingclient() {
  // @@protoc_insertion_point(field_release:network.FollowRequest.requestingClient)
  
  return requestingclient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FollowRequest::set_allocated_requestingclient(::std::string* requestingclient) {
  if (requestingclient != NULL) {
    
  } else {
    
  }
  requestingclient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestingclient);
  // @@protoc_insertion_point(field_set_allocated:network.FollowRequest.requestingClient)
}

// string followRequest = 2;
inline void FollowRequest::clear_followrequest() {
  followrequest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FollowRequest::followrequest() const {
  // @@protoc_insertion_point(field_get:network.FollowRequest.followRequest)
  return followrequest_.GetNoArena();
}
inline void FollowRequest::set_followrequest(const ::std::string& value) {
  
  followrequest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.FollowRequest.followRequest)
}
#if LANG_CXX11
inline void FollowRequest::set_followrequest(::std::string&& value) {
  
  followrequest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.FollowRequest.followRequest)
}
#endif
inline void FollowRequest::set_followrequest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  followrequest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.FollowRequest.followRequest)
}
inline void FollowRequest::set_followrequest(const char* value, size_t size) {
  
  followrequest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.FollowRequest.followRequest)
}
inline ::std::string* FollowRequest::mutable_followrequest() {
  
  // @@protoc_insertion_point(field_mutable:network.FollowRequest.followRequest)
  return followrequest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FollowRequest::release_followrequest() {
  // @@protoc_insertion_point(field_release:network.FollowRequest.followRequest)
  
  return followrequest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FollowRequest::set_allocated_followrequest(::std::string* followrequest) {
  if (followrequest != NULL) {
    
  } else {
    
  }
  followrequest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), followrequest);
  // @@protoc_insertion_point(field_set_allocated:network.FollowRequest.followRequest)
}

// -------------------------------------------------------------------

// FollowReply

// int32 IReplyValue = 1;
inline void FollowReply::clear_ireplyvalue() {
  ireplyvalue_ = 0;
}
inline ::google::protobuf::int32 FollowReply::ireplyvalue() const {
  // @@protoc_insertion_point(field_get:network.FollowReply.IReplyValue)
  return ireplyvalue_;
}
inline void FollowReply::set_ireplyvalue(::google::protobuf::int32 value) {
  
  ireplyvalue_ = value;
  // @@protoc_insertion_point(field_set:network.FollowReply.IReplyValue)
}

// -------------------------------------------------------------------

// UnfollowRequest

// string requestingClient = 1;
inline void UnfollowRequest::clear_requestingclient() {
  requestingclient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnfollowRequest::requestingclient() const {
  // @@protoc_insertion_point(field_get:network.UnfollowRequest.requestingClient)
  return requestingclient_.GetNoArena();
}
inline void UnfollowRequest::set_requestingclient(const ::std::string& value) {
  
  requestingclient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.UnfollowRequest.requestingClient)
}
#if LANG_CXX11
inline void UnfollowRequest::set_requestingclient(::std::string&& value) {
  
  requestingclient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.UnfollowRequest.requestingClient)
}
#endif
inline void UnfollowRequest::set_requestingclient(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  requestingclient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.UnfollowRequest.requestingClient)
}
inline void UnfollowRequest::set_requestingclient(const char* value, size_t size) {
  
  requestingclient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.UnfollowRequest.requestingClient)
}
inline ::std::string* UnfollowRequest::mutable_requestingclient() {
  
  // @@protoc_insertion_point(field_mutable:network.UnfollowRequest.requestingClient)
  return requestingclient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnfollowRequest::release_requestingclient() {
  // @@protoc_insertion_point(field_release:network.UnfollowRequest.requestingClient)
  
  return requestingclient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnfollowRequest::set_allocated_requestingclient(::std::string* requestingclient) {
  if (requestingclient != NULL) {
    
  } else {
    
  }
  requestingclient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestingclient);
  // @@protoc_insertion_point(field_set_allocated:network.UnfollowRequest.requestingClient)
}

// string unfollowRequest = 2;
inline void UnfollowRequest::clear_unfollowrequest() {
  unfollowrequest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnfollowRequest::unfollowrequest() const {
  // @@protoc_insertion_point(field_get:network.UnfollowRequest.unfollowRequest)
  return unfollowrequest_.GetNoArena();
}
inline void UnfollowRequest::set_unfollowrequest(const ::std::string& value) {
  
  unfollowrequest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.UnfollowRequest.unfollowRequest)
}
#if LANG_CXX11
inline void UnfollowRequest::set_unfollowrequest(::std::string&& value) {
  
  unfollowrequest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.UnfollowRequest.unfollowRequest)
}
#endif
inline void UnfollowRequest::set_unfollowrequest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unfollowrequest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.UnfollowRequest.unfollowRequest)
}
inline void UnfollowRequest::set_unfollowrequest(const char* value, size_t size) {
  
  unfollowrequest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.UnfollowRequest.unfollowRequest)
}
inline ::std::string* UnfollowRequest::mutable_unfollowrequest() {
  
  // @@protoc_insertion_point(field_mutable:network.UnfollowRequest.unfollowRequest)
  return unfollowrequest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnfollowRequest::release_unfollowrequest() {
  // @@protoc_insertion_point(field_release:network.UnfollowRequest.unfollowRequest)
  
  return unfollowrequest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnfollowRequest::set_allocated_unfollowrequest(::std::string* unfollowrequest) {
  if (unfollowrequest != NULL) {
    
  } else {
    
  }
  unfollowrequest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unfollowrequest);
  // @@protoc_insertion_point(field_set_allocated:network.UnfollowRequest.unfollowRequest)
}

// -------------------------------------------------------------------

// UnfollowReply

// int32 IReplyValue = 1;
inline void UnfollowReply::clear_ireplyvalue() {
  ireplyvalue_ = 0;
}
inline ::google::protobuf::int32 UnfollowReply::ireplyvalue() const {
  // @@protoc_insertion_point(field_get:network.UnfollowReply.IReplyValue)
  return ireplyvalue_;
}
inline void UnfollowReply::set_ireplyvalue(::google::protobuf::int32 value) {
  
  ireplyvalue_ = value;
  // @@protoc_insertion_point(field_set:network.UnfollowReply.IReplyValue)
}

// -------------------------------------------------------------------

// ListRequest

// -------------------------------------------------------------------

// ListReply

// repeated string names = 1;
inline int ListReply::names_size() const {
  return names_.size();
}
inline void ListReply::clear_names() {
  names_.Clear();
}
inline const ::std::string& ListReply::names(int index) const {
  // @@protoc_insertion_point(field_get:network.ListReply.names)
  return names_.Get(index);
}
inline ::std::string* ListReply::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:network.ListReply.names)
  return names_.Mutable(index);
}
inline void ListReply::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:network.ListReply.names)
  names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListReply::set_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:network.ListReply.names)
  names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListReply::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.ListReply.names)
}
inline void ListReply::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.ListReply.names)
}
inline ::std::string* ListReply::add_names() {
  // @@protoc_insertion_point(field_add_mutable:network.ListReply.names)
  return names_.Add();
}
inline void ListReply::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.ListReply.names)
}
#if LANG_CXX11
inline void ListReply::add_names(::std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.ListReply.names)
}
#endif
inline void ListReply::add_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.ListReply.names)
}
inline void ListReply::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.ListReply.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListReply::names() const {
  // @@protoc_insertion_point(field_list:network.ListReply.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListReply::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:network.ListReply.names)
  return &names_;
}

// -------------------------------------------------------------------

// Post

// string name = 1;
inline void Post::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Post::name() const {
  // @@protoc_insertion_point(field_get:network.Post.name)
  return name_.GetNoArena();
}
inline void Post::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.Post.name)
}
#if LANG_CXX11
inline void Post::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.Post.name)
}
#endif
inline void Post::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.Post.name)
}
inline void Post::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.Post.name)
}
inline ::std::string* Post::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:network.Post.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Post::release_name() {
  // @@protoc_insertion_point(field_release:network.Post.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Post::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:network.Post.name)
}

// .google.protobuf.Timestamp time = 2;
inline bool Post::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Post::time() const {
  const ::google::protobuf::Timestamp* p = time_;
  // @@protoc_insertion_point(field_get:network.Post.time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Post::release_time() {
  // @@protoc_insertion_point(field_release:network.Post.time)
  
  ::google::protobuf::Timestamp* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Post::mutable_time() {
  
  if (time_ == NULL) {
    time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:network.Post.time)
  return time_;
}
inline void Post::set_allocated_time(::google::protobuf::Timestamp* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_);
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:network.Post.time)
}

// string content = 3;
inline void Post::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Post::content() const {
  // @@protoc_insertion_point(field_get:network.Post.content)
  return content_.GetNoArena();
}
inline void Post::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.Post.content)
}
#if LANG_CXX11
inline void Post::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.Post.content)
}
#endif
inline void Post::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.Post.content)
}
inline void Post::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.Post.content)
}
inline ::std::string* Post::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:network.Post.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Post::release_content() {
  // @@protoc_insertion_point(field_release:network.Post.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Post::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:network.Post.content)
}

// -------------------------------------------------------------------

// Timeline

// repeated .network.Post posts = 1;
inline int Timeline::posts_size() const {
  return posts_.size();
}
inline void Timeline::clear_posts() {
  posts_.Clear();
}
inline const ::network::Post& Timeline::posts(int index) const {
  // @@protoc_insertion_point(field_get:network.Timeline.posts)
  return posts_.Get(index);
}
inline ::network::Post* Timeline::mutable_posts(int index) {
  // @@protoc_insertion_point(field_mutable:network.Timeline.posts)
  return posts_.Mutable(index);
}
inline ::network::Post* Timeline::add_posts() {
  // @@protoc_insertion_point(field_add:network.Timeline.posts)
  return posts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::network::Post >*
Timeline::mutable_posts() {
  // @@protoc_insertion_point(field_mutable_list:network.Timeline.posts)
  return &posts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::network::Post >&
Timeline::posts() const {
  // @@protoc_insertion_point(field_list:network.Timeline.posts)
  return posts_;
}

// -------------------------------------------------------------------

// UserData

// string name = 1;
inline void UserData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserData::name() const {
  // @@protoc_insertion_point(field_get:network.UserData.name)
  return name_.GetNoArena();
}
inline void UserData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.UserData.name)
}
#if LANG_CXX11
inline void UserData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.UserData.name)
}
#endif
inline void UserData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.UserData.name)
}
inline void UserData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.UserData.name)
}
inline ::std::string* UserData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:network.UserData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData::release_name() {
  // @@protoc_insertion_point(field_release:network.UserData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:network.UserData.name)
}

// .network.Timeline user_timeline = 2;
inline bool UserData::has_user_timeline() const {
  return this != internal_default_instance() && user_timeline_ != NULL;
}
inline void UserData::clear_user_timeline() {
  if (GetArenaNoVirtual() == NULL && user_timeline_ != NULL) {
    delete user_timeline_;
  }
  user_timeline_ = NULL;
}
inline const ::network::Timeline& UserData::user_timeline() const {
  const ::network::Timeline* p = user_timeline_;
  // @@protoc_insertion_point(field_get:network.UserData.user_timeline)
  return p != NULL ? *p : *reinterpret_cast<const ::network::Timeline*>(
      &::network::_Timeline_default_instance_);
}
inline ::network::Timeline* UserData::release_user_timeline() {
  // @@protoc_insertion_point(field_release:network.UserData.user_timeline)
  
  ::network::Timeline* temp = user_timeline_;
  user_timeline_ = NULL;
  return temp;
}
inline ::network::Timeline* UserData::mutable_user_timeline() {
  
  if (user_timeline_ == NULL) {
    user_timeline_ = new ::network::Timeline;
  }
  // @@protoc_insertion_point(field_mutable:network.UserData.user_timeline)
  return user_timeline_;
}
inline void UserData::set_allocated_user_timeline(::network::Timeline* user_timeline) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_timeline_;
  }
  if (user_timeline) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_timeline = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_timeline, submessage_arena);
    }
    
  } else {
    
  }
  user_timeline_ = user_timeline;
  // @@protoc_insertion_point(field_set_allocated:network.UserData.user_timeline)
}

// repeated string following = 3;
inline int UserData::following_size() const {
  return following_.size();
}
inline void UserData::clear_following() {
  following_.Clear();
}
inline const ::std::string& UserData::following(int index) const {
  // @@protoc_insertion_point(field_get:network.UserData.following)
  return following_.Get(index);
}
inline ::std::string* UserData::mutable_following(int index) {
  // @@protoc_insertion_point(field_mutable:network.UserData.following)
  return following_.Mutable(index);
}
inline void UserData::set_following(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:network.UserData.following)
  following_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UserData::set_following(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:network.UserData.following)
  following_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UserData::set_following(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  following_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.UserData.following)
}
inline void UserData::set_following(int index, const char* value, size_t size) {
  following_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.UserData.following)
}
inline ::std::string* UserData::add_following() {
  // @@protoc_insertion_point(field_add_mutable:network.UserData.following)
  return following_.Add();
}
inline void UserData::add_following(const ::std::string& value) {
  following_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.UserData.following)
}
#if LANG_CXX11
inline void UserData::add_following(::std::string&& value) {
  following_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.UserData.following)
}
#endif
inline void UserData::add_following(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  following_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.UserData.following)
}
inline void UserData::add_following(const char* value, size_t size) {
  following_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.UserData.following)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserData::following() const {
  // @@protoc_insertion_point(field_list:network.UserData.following)
  return following_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserData::mutable_following() {
  // @@protoc_insertion_point(field_mutable_list:network.UserData.following)
  return &following_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UserDataBase

// map<string, .network.UserData> all_users = 1;
inline int UserDataBase::all_users_size() const {
  return all_users_.size();
}
inline void UserDataBase::clear_all_users() {
  all_users_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::network::UserData >&
UserDataBase::all_users() const {
  // @@protoc_insertion_point(field_map:network.UserDataBase.all_users)
  return all_users_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::network::UserData >*
UserDataBase::mutable_all_users() {
  // @@protoc_insertion_point(field_mutable_map:network.UserDataBase.all_users)
  return all_users_.MutableMap();
}

// -------------------------------------------------------------------

// DebugRequest

// .google.protobuf.Timestamp timein = 1;
inline bool DebugRequest::has_timein() const {
  return this != internal_default_instance() && timein_ != NULL;
}
inline const ::google::protobuf::Timestamp& DebugRequest::timein() const {
  const ::google::protobuf::Timestamp* p = timein_;
  // @@protoc_insertion_point(field_get:network.DebugRequest.timein)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DebugRequest::release_timein() {
  // @@protoc_insertion_point(field_release:network.DebugRequest.timein)
  
  ::google::protobuf::Timestamp* temp = timein_;
  timein_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DebugRequest::mutable_timein() {
  
  if (timein_ == NULL) {
    timein_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:network.DebugRequest.timein)
  return timein_;
}
inline void DebugRequest::set_allocated_timein(::google::protobuf::Timestamp* timein) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timein_);
  }
  if (timein) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(timein)->GetArena();
    if (message_arena != submessage_arena) {
      timein = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timein, submessage_arena);
    }
    
  } else {
    
  }
  timein_ = timein;
  // @@protoc_insertion_point(field_set_allocated:network.DebugRequest.timein)
}

// -------------------------------------------------------------------

// DebugReply

// .google.protobuf.Timestamp timeout = 1;
inline bool DebugReply::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
inline const ::google::protobuf::Timestamp& DebugReply::timeout() const {
  const ::google::protobuf::Timestamp* p = timeout_;
  // @@protoc_insertion_point(field_get:network.DebugReply.timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* DebugReply::release_timeout() {
  // @@protoc_insertion_point(field_release:network.DebugReply.timeout)
  
  ::google::protobuf::Timestamp* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* DebugReply::mutable_timeout() {
  
  if (timeout_ == NULL) {
    timeout_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:network.DebugReply.timeout)
  return timeout_;
}
inline void DebugReply::set_allocated_timeout(::google::protobuf::Timestamp* timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:network.DebugReply.timeout)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_network_2eproto__INCLUDED
